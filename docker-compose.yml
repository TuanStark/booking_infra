version: "3.9"
services:
  # ================= AUTH DB =================
  auth-db:
    image: postgres:16
    container_name: booking_auth-db
    environment:
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASS}
      POSTGRES_DB: ${AUTH_DB_NAME}
    ports:
      - "${AUTH_DB_PORT}:5432"
    networks:
      my_custom_network:
        ipv4_address: ${AUTH_DB_IP}

  # ================= USER DB =================
  user-db:
    image: postgres:16
    container_name: booking_user-db
    environment:
      POSTGRES_USER: ${USER_DB_USER}
      POSTGRES_PASSWORD: ${USER_DB_PASS}
      POSTGRES_DB: ${USER_DB_NAME}
    ports:
      - "${USER_DB_PORT}:5432"
    networks:
      my_custom_network:
        ipv4_address: ${USER_DB_IP}

  # ================= BUILDING DB =================
  building-db:
    image: postgres:16
    container_name: booking_building-db
    environment:
      POSTGRES_USER: ${BUILDING_DB_USER}
      POSTGRES_PASSWORD: ${BUILDING_DB_PASS}
      POSTGRES_DB: ${BUILDING_DB_NAME}
    ports:
      - "${BUILDING_DB_PORT}:5432"
    networks:
      my_custom_network:
        ipv4_address: ${BUILDING_DB_IP}

  # ================= BOOKING DB =================
  booking-db:
    image: postgres:16
    container_name: booking_booking-db
    environment:
      POSTGRES_USER: ${BOOKING_DB_USER}
      POSTGRES_PASSWORD: ${BOOKING_DB_PASS}
      POSTGRES_DB: ${BOOKING_DB_NAME}
    ports:
      - "${BOOKING_DB_PORT}:5432"
    networks:
      my_custom_network:
        ipv4_address: ${BOOKING_DB_IP}

  # ================= PAYMENT DB =================
  payment-db:
    image: postgres:16
    container_name: booking_payment-db
    environment:
      POSTGRES_USER: ${PAYMENT_DB_USER}
      POSTGRES_PASSWORD: ${PAYMENT_DB_PASS}
      POSTGRES_DB: ${PAYMENT_DB_NAME}
    ports:
      - "${PAYMENT_DB_PORT}:5432"
    networks:
      my_custom_network:
        ipv4_address: ${PAYMENT_DB_IP}

  # ================= REVIEW DB =================
  review-db:
    image: postgres:16
    container_name: booking_review-db
    environment:
      POSTGRES_USER: ${REVIEW_DB_USER}
      POSTGRES_PASSWORD: ${REVIEW_DB_PASS}
      POSTGRES_DB: ${REVIEW_DB_NAME}
    ports:
      - "${REVIEW_DB_PORT}:5432"
    networks:
      my_custom_network:
        ipv4_address: ${REVIEW_DB_IP}

  # ================= ROOM DB =================
  room-db:
    image: postgres:16
    container_name: booking_room-db
    environment:
      POSTGRES_USER: ${ROOM_DB_USER}
      POSTGRES_PASSWORD: ${ROOM_DB_PASS}
      POSTGRES_DB: ${ROOM_DB_NAME}
    ports:
      - "${ROOM_DB_PORT}:5432"
    networks:
      my_custom_network:
        ipv4_address: ${ROOM_DB_IP}
  
  # ================= NOTIFICATION DB =================
  notification-db:
    image: postgres:16
    container_name: booking_notification-db
    environment:
      POSTGRES_USER: ${NOTIFICATION_DB_USER}
      POSTGRES_PASSWORD: ${NOTIFICATION_DB_PASS}
      POSTGRES_DB: ${NOTIFICATION_DB_NAME}
    ports:
      - "${NOTIFICATION_DB_PORT}:5432"
    networks:
      my_custom_network:
        ipv4_address: ${NOTIFICATION_DB_IP}

  # ================= REDIS =================
  redis:
    image: redis:7
    container_name: booking_redis
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      my_custom_network:
        ipv4_address: ${REDIS_IP}

  # ================= PGADMIN =================
  pgadmin:
    image: dpage/pgadmin4
    container_name: booking_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"
    networks:
      my_custom_network:
        ipv4_address: ${PGADMIN_IP}

  # ================= RABBITMQ =================
  rabbitmq:
    image: rabbitmq:latest
    container_name: booking_rabbitmq
    ports:
      - "5672:5672"   # RabbitMQ
      - "15672:15672" # Management UI
    networks:
      my_custom_network:
        ipv4_address: ${RABBITMQ_IP}

# ================= ZOOKEEPER =================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: booking_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports:
      - "2181:2181"
    networks:
      my_custom_network:
        ipv4_address: ${ZOOKEEPER_IP}

  # ================= KAFKA =================
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: booking_kafka
    ports:
      - "${KAFKA_PORT}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181    # ðŸ‘ˆ dÃ¹ng tÃªn service, khÃ´ng dÃ¹ng IP
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:${KAFKA_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      my_custom_network:
        ipv4_address: ${KAFKA_IP}

networks:
  my_custom_network:
    external: true
